## Apollo相关配置
#app:
#  id: allen-message-sending
#apollo:
#  bootstrap:
#    enabled: true
#    namespaces: application.yml #,application.yml #,application-dev.yml
#    # 使Apollo的加载顺序放到日志系统加载之前，不过这会导致Apollo的启动过程无法通过日志的方式输出
#    eagerLoad:
#      enabled: true
#  # Apollo Meta Server服务发现
#  meta: http://localhost:8080
#  # 配置文件缓存路径，默认：Mac/Linux: /opt/data/{appId}/config-cache，Windows: C:\opt\data\{appId}\config-cache
#  cacheDir: /Users/allen/Develop/enviroment/apollo/apollo-config-cache

# 服务器端口号
server:
  port: 8084
  servlet:
    # 配置项目名称（默认为 /），如果配置了项目名称，那么在访问路径中要加上配置的路径
    context-path: /
    encoding:
      charset: UTF-8
    session:
      # 服务器session最大超时时间(分钟)
      timeout: 30m
  # tomcat配置
  tomcat:
    # tomcat字符集
    uri-encoding: UTF-8
    # tomcat最大连接数
    max-connections: 2000
    accept-count: 5000
    # 最大连接超时时间
    connection-timeout: 5000
    accesslog:
      # 启用访问日志
      enabled: true
      # 访问日志的格式模式
      pattern: common
      # 是否缓冲输出，使其仅定期刷新
      buffered: true
      # 创建日志文件的目录。可以绝对或相对于Tomcat基础目录（整体一定是绝对路径，windows要加盘符）
      directory: /Users/allen/Documents/Develop/logs/${spring.application.name}
      # directory: /Users/allen/Develop/logs/${spring.application.name}
       # 日志文件名前缀
      prefix: ${spring.application.name}-access-
      # 要放在日志文件名中的日期格式
      file-date-format: yyyy-MM-dd
       # 日志文件名后缀
      suffix: .log
      # 是否延迟在文件名中包含日期戳，直到旋转时间
      rename-on-rotate: false
      # 设置请求的IP地址，主机名，协议和端口的请求属性
      request-attributes-enabled: false
      # 是否启用访问日志轮换
      rotate: true
    threads:
      # tomcat最大线程数
      max: 1000

spring:
  application:
    name: allen-message-sending
  main:
    banner-mode: "off"
  cloud:
    loadbalancer:
      retry:
        # 开启重试机制
        enabled: true
eureka:
  instance:
    instance-id: ${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}
    hostname: ${spring.cloud.client.ip-address}
    # true：实例以 IP 的形式注册；false：实例以机器 HOSTNAME 形式注册
    prefer-ip-address: true
    # 表示 Eureka Server 在接收到上一个心跳之后等待下一个心跳的秒数（默认 90 秒），
    # 若不能在指定时间内收到心跳，则移除此实例，并禁止此实例的流量。
    # 需要设置为至少高于 lease-renewal-interval-in-seconds 的值，不然会被误移除了。
    lease-expiration-duration-in-seconds: 30
    # 表示 Eureka Client 向 Eureka Server 发送心跳的频率（默认 30 秒），
    # 如果在 lease-expiration-duration-in-seconds 指定的时间内未收到心跳，则移除该实例。
    lease-renewal-interval-in-seconds: 10
  client:
    # Eureka Client 刷新本地缓存时间，默认30秒
    registry-fetch-interval-seconds: 5
    # 表示是否将自己注册到Eureka Server，默认为true。
    register-with-eureka: true 
    # 表示是否从Eureka Server获取注册信息，默认为true。
    fetch-registry: true
    # 表示客户端需要注册的 Eureka Server 的地址。
    service-url:
      defaultZone: http://allen:allen1234@localhost:8701/eureka/
      
feign:
  client:
    config:
      default: 
        retryer: feign.Retryer.Default
        connect-timeout: 3000
        read-timeout: 5000
        logger-level: FULL
  okhttp:
    enabled: true
  httpclient:
    enabled: false
    # 最大连接数
    max-connections: 200
    # 每个路由最大连接数，okHttp不起作用
    max-connections-per-route: 50
    connection-timeout: 3000
    time-to-live: 360
  compression:
    request:
      enabled: true
    response:
      enabled: true
  hystrix:
    enabled: true
  

ribbon:
  # 负载均衡超时时间
  ReadTimeout: 5000
  # ribbon请求连接的超时时间，默认值2000
  ConnectTimeout: 3000
  # 对当前实例的重试次数，默认0
  MaxAutoRetries: 0
  # 对切换实例的重试次数，默认0
  MaxAutoRetriesNextServer: 1
  # 对所有操作请求都进行重试,默认false
  OkToRetryOnAllOperations: false
#  eager-load:
#    # 开启饿汉加载模式
#    enabled: false
#    clients:
#    - allen-message-forwarding-server
  okhttp:
    enabled: true

# 客户端Ribbon配置    
#allen-message-forwarding-server: 
#  ribbon: 
#    NFLoadBalancerClassName: 
#    NFLoadBalancerRuleClassName: 
#    NFLoadBalancerPingClassName: 
#    NIWSServerListClassName: 
#    NIWSServerListFilterClassName: 
  
hystrix:
  command:
    # 全局默认配置
    default:
      # 线程隔离相关
      execution:
        # 是否给方法执行设置超时时间，默认为true。一般我们不要改。
        timeout: 
          enable: true
        isolation:
          # 配置请求隔离的方式，这里是默认的线程池方式。还有一种信号量的方式semaphore。
          strategy: THREAD
          thread:
            # 方式执行的超时时间，默认为1000毫秒，在实际场景中需要根据情况设置
            timeoutInMilliseconds: 10000
    # 实例配置
    # HystrixCommandKey:
    
# 监控端点：http://localhost:8090/actuator/hystrix.stream    
management:
  endpoints:
    web:
      exposure:
        # include: hystrix.stream,health,info
        include: "*"
  endpoint:
    health:
      show-details: always